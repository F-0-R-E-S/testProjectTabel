{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Returns `true` if action has the same type as action creator.\n * Defines Type Guard that lets TypeScript know `payload` type inside blocks\n * where `isType` returned `true`.\n *\n * @example\n *\n *    const somethingHappened =\n *      actionCreator<{foo: string}>('SOMETHING_HAPPENED');\n *\n *    if (isType(action, somethingHappened)) {\n *      // action.payload has type {foo: string}\n *    }\n */\n\nfunction isType(action, actionCreator) {\n  return action.type === actionCreator.type;\n}\n\nexports.isType = isType;\n/**\n * Creates Action Creator factory with optional prefix for action types.\n * @param prefix Prefix to be prepended to action types as `<prefix>/<type>`.\n * @param defaultIsError Function that detects whether action is error given the\n *   payload. Default is `payload => payload instanceof Error`.\n */\n\nfunction actionCreatorFactory(prefix, defaultIsError) {\n  if (defaultIsError === void 0) {\n    defaultIsError = function (p) {\n      return p instanceof Error;\n    };\n  }\n\n  var actionTypes = {};\n  var base = prefix ? prefix + \"/\" : '';\n\n  function actionCreator(type, commonMeta, isError) {\n    if (isError === void 0) {\n      isError = defaultIsError;\n    }\n\n    var fullType = base + type;\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (actionTypes[fullType]) throw new Error(\"Duplicate action type: \" + fullType);\n      actionTypes[fullType] = true;\n    }\n\n    return Object.assign(function (payload, meta) {\n      var action = {\n        type: fullType,\n        payload: payload\n      };\n\n      if (commonMeta || meta) {\n        action.meta = Object.assign({}, commonMeta, meta);\n      }\n\n      if (isError && (typeof isError === 'boolean' || isError(payload))) {\n        action.error = true;\n      }\n\n      return action;\n    }, {\n      type: fullType,\n      toString: function () {\n        return fullType;\n      },\n      match: function (action) {\n        return action.type === fullType;\n      }\n    });\n  }\n\n  function asyncActionCreators(type, commonMeta) {\n    return {\n      type: base + type,\n      started: actionCreator(type + \"_STARTED\", commonMeta, false),\n      done: actionCreator(type + \"_DONE\", commonMeta, false),\n      failed: actionCreator(type + \"_FAILED\", commonMeta, true)\n    };\n  }\n\n  return Object.assign(actionCreator, {\n    async: asyncActionCreators\n  });\n}\n\nexports.actionCreatorFactory = actionCreatorFactory;\nexports.default = actionCreatorFactory;","map":{"version":3,"sources":["/Users/nikita/testProjectTabel/node_modules/typescript-fsa/lib/index.js"],"names":["Object","defineProperty","exports","value","isType","action","actionCreator","type","actionCreatorFactory","prefix","defaultIsError","p","Error","actionTypes","base","commonMeta","isError","fullType","process","env","NODE_ENV","assign","payload","meta","error","toString","match","asyncActionCreators","started","done","failed","async","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Returns `true` if action has the same type as action creator.\n * Defines Type Guard that lets TypeScript know `payload` type inside blocks\n * where `isType` returned `true`.\n *\n * @example\n *\n *    const somethingHappened =\n *      actionCreator<{foo: string}>('SOMETHING_HAPPENED');\n *\n *    if (isType(action, somethingHappened)) {\n *      // action.payload has type {foo: string}\n *    }\n */\nfunction isType(action, actionCreator) {\n    return action.type === actionCreator.type;\n}\nexports.isType = isType;\n/**\n * Creates Action Creator factory with optional prefix for action types.\n * @param prefix Prefix to be prepended to action types as `<prefix>/<type>`.\n * @param defaultIsError Function that detects whether action is error given the\n *   payload. Default is `payload => payload instanceof Error`.\n */\nfunction actionCreatorFactory(prefix, defaultIsError) {\n    if (defaultIsError === void 0) { defaultIsError = function (p) { return p instanceof Error; }; }\n    var actionTypes = {};\n    var base = prefix ? prefix + \"/\" : '';\n    function actionCreator(type, commonMeta, isError) {\n        if (isError === void 0) { isError = defaultIsError; }\n        var fullType = base + type;\n        if (process.env.NODE_ENV !== 'production') {\n            if (actionTypes[fullType])\n                throw new Error(\"Duplicate action type: \" + fullType);\n            actionTypes[fullType] = true;\n        }\n        return Object.assign(function (payload, meta) {\n            var action = {\n                type: fullType,\n                payload: payload,\n            };\n            if (commonMeta || meta) {\n                action.meta = Object.assign({}, commonMeta, meta);\n            }\n            if (isError && (typeof isError === 'boolean' || isError(payload))) {\n                action.error = true;\n            }\n            return action;\n        }, {\n            type: fullType,\n            toString: function () { return fullType; },\n            match: function (action) {\n                return action.type === fullType;\n            },\n        });\n    }\n    function asyncActionCreators(type, commonMeta) {\n        return {\n            type: base + type,\n            started: actionCreator(type + \"_STARTED\", commonMeta, false),\n            done: actionCreator(type + \"_DONE\", commonMeta, false),\n            failed: actionCreator(type + \"_FAILED\", commonMeta, true),\n        };\n    }\n    return Object.assign(actionCreator, { async: asyncActionCreators });\n}\nexports.actionCreatorFactory = actionCreatorFactory;\nexports.default = actionCreatorFactory;\n"]},"metadata":{},"sourceType":"script"}