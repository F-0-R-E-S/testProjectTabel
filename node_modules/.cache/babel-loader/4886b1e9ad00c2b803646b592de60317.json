{"ast":null,"code":"import { call, // put,\ntakeLatest } from \"redux-saga/effects\";\nimport { bindAsyncAction } from \"typescript-fsa-redux-saga\";\nimport { getUser, getUsers, triggerGetUser, triggerGetUsers } from \"./userTypes\";\nimport axios from \"axios\";\nconst getUserSaga = bindAsyncAction(getUser)(function* () {\n  try {\n    const results = yield call(apiFetch);\n\n    async function apiFetch() {\n      const config = {\n        headers: {\n          \"X-User-Id\": `Auth0User`,\n          \"X-Org-Id\": `Auth0Org`\n        }\n      };\n      const data = {// \"Page\": 70,\n        // \"PerPage\": 20\n      };\n      return await axios.post(`https://test-unified.client-api.vyyer.id/api/v2/scans/get`, data, config).then(response => {\n        return response.data.Data.map(item => item.IdentityID);\n      }).catch(error => {\n        console.log(error);\n      });\n    } //  yield put(triggerGetUsers(results))\n\n\n    return {\n      usersId: results.reverse()\n    };\n  } catch (e) {\n    console.log('error');\n  }\n});\nconst getUsersSaga = bindAsyncAction(getUsers)(function* (_ref) {\n  let {\n    payload\n  } = _ref;\n\n  try {\n    const results = yield call(apiFetch);\n\n    async function apiFetch() {\n      const config = {\n        headers: {\n          \"X-User-Id\": `Auth0User`,\n          \"X-Org-Id\": `Auth0Org`\n        }\n      };\n      const data = {\n        \"IDs\": payload\n      };\n      return await axios.post(`https://test-unified.client-api.vyyer.id/api/v2/identities/get`, data, config).then(response => {\n        return response.data.Data;\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n\n    return {\n      users: results\n    };\n  } catch (e) {\n    console.log('error');\n  }\n});\nexport default function* functionExportSaga() {\n  yield takeLatest(triggerGetUser.type, getUserSaga);\n  yield takeLatest(triggerGetUsers.type, getUsersSaga);\n}","map":{"version":3,"sources":["/Users/nikita/testProjectTabel/src/store/user/userSaga.ts"],"names":["call","takeLatest","bindAsyncAction","getUser","getUsers","triggerGetUser","triggerGetUsers","axios","getUserSaga","results","apiFetch","config","headers","data","post","then","response","Data","map","item","IdentityID","catch","error","console","log","usersId","reverse","e","getUsersSaga","payload","users","functionExportSaga","type"],"mappings":"AAAA,SACIA,IADJ,EAEI;AACAC,UAHJ,QAIO,oBAJP;AAMA,SAASC,eAAT,QAAgC,2BAAhC;AACA,SAASC,OAAT,EAAkBC,QAAlB,EAA4BC,cAA5B,EAA4CC,eAA5C,QAAmE,aAAnE;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAGA,MAAMC,WAAW,GAAGN,eAAe,CAACC,OAAD,CAAf,CAAyB,aAA2B;AACpE,MAAI;AACA,UAAMM,OAAO,GAAG,MAAMT,IAAI,CAACU,QAAD,CAA1B;;AACA,mBAAeA,QAAf,GAA0B;AACtB,YAAMC,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE;AACL,uBAAc,WADT;AAEL,sBAAa;AAFR;AADE,OAAf;AAOA,YAAMC,IAAI,GAAG,CACT;AACA;AAFS,OAAb;AAKA,aAAO,MAAMN,KAAK,CACbO,IADQ,CACF,2DADE,EAC0DD,IAD1D,EACgEF,MADhE,EAERI,IAFQ,CAEFC,QAAD,IAAc;AAChB,eAAOA,QAAQ,CAACH,IAAT,CAAcI,IAAd,CAAmBC,GAAnB,CAAwBC,IAAD,IAAeA,IAAI,CAACC,UAA3C,CAAP;AACH,OAJQ,EAINC,KAJM,CAICC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OANQ,CAAb;AAOH,KAtBD,CAuBA;;;AACC,WAAO;AAAEG,MAAAA,OAAO,EAAEhB,OAAO,CAACiB,OAAR;AAAX,KAAP;AACJ,GAzBD,CAyBE,OAAOC,CAAP,EAAU;AACRJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,CA7BmB,CAApB;AA+BA,MAAMI,YAAY,GAAG1B,eAAe,CAACE,QAAD,CAAf,CAA0B,iBAAoC;AAAA,MAAzB;AAACyB,IAAAA;AAAD,GAAyB;;AAC/E,MAAI;AACA,UAAMpB,OAAO,GAAG,MAAMT,IAAI,CAACU,QAAD,CAA1B;;AACA,mBAAeA,QAAf,GAA0B;AACtB,YAAMC,MAAM,GAAG;AACXC,QAAAA,OAAO,EAAE;AACL,uBAAc,WADT;AAEL,sBAAa;AAFR;AADE,OAAf;AAOA,YAAMC,IAAI,GAAG;AACT,eAAOgB;AADE,OAAb;AAIA,aAAO,MAAMtB,KAAK,CACbO,IADQ,CACF,gEADE,EAC+DD,IAD/D,EACqEF,MADrE,EAERI,IAFQ,CAEFC,QAAD,IAAc;AAChB,eAAOA,QAAQ,CAACH,IAAT,CAAcI,IAArB;AACH,OAJQ,EAINI,KAJM,CAICC,KAAD,IAAW;AAChBC,QAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACH,OANQ,CAAb;AAOH;;AACD,WAAO;AAAEQ,MAAAA,KAAK,EAAErB;AAAT,KAAP;AACH,GAvBD,CAuBE,OAAOkB,CAAP,EAAU;AACRJ,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACH;AACJ,CA3BoB,CAArB;AA6BA,eAAe,UAAUO,kBAAV,GAA+B;AAC1C,QAAM9B,UAAU,CAACI,cAAc,CAAC2B,IAAhB,EAAsBxB,WAAtB,CAAhB;AACA,QAAMP,UAAU,CAACK,eAAe,CAAC0B,IAAjB,EAAuBJ,YAAvB,CAAhB;AAGH","sourcesContent":["import {\n    call,\n    // put,\n    takeLatest,\n} from \"redux-saga/effects\";\nimport { SagaIterator } from \"redux-saga\";\nimport { bindAsyncAction } from \"typescript-fsa-redux-saga\";\nimport { getUser, getUsers, triggerGetUser, triggerGetUsers } from \"./userTypes\";\nimport axios from \"axios\";\n\n\nconst getUserSaga = bindAsyncAction(getUser)(function* (): SagaIterator {\n    try {\n        const results = yield call(apiFetch);\n        async function apiFetch() {\n            const config = {\n                headers: {\n                    \"X-User-Id\": `Auth0User`,\n                    \"X-Org-Id\": `Auth0Org`,\n                },\n            };\n\n            const data = {\n                // \"Page\": 70,\n                // \"PerPage\": 20\n            };\n\n            return await axios\n                .post(`https://test-unified.client-api.vyyer.id/api/v2/scans/get`, data, config)\n                .then((response) => {\n                    return response.data.Data.map((item: any) => item.IdentityID);\n                }).catch((error) => {\n                    console.log(error)\n                });\n        }\n        //  yield put(triggerGetUsers(results))\n         return { usersId: results.reverse() }\n    } catch (e) {\n        console.log('error')\n    }\n});\n\nconst getUsersSaga = bindAsyncAction(getUsers)(function* ({payload}): SagaIterator {\n    try {\n        const results = yield call(apiFetch);\n        async function apiFetch() {\n            const config = {\n                headers: {\n                    \"X-User-Id\": `Auth0User`,\n                    \"X-Org-Id\": `Auth0Org`,\n                },\n            };\n\n            const data = {\n                \"IDs\": payload,\n            };\n\n            return await axios\n                .post(`https://test-unified.client-api.vyyer.id/api/v2/identities/get`, data, config)\n                .then((response) => {\n                    return response.data.Data\n                }).catch((error) => {\n                    console.log(error)\n                });\n        }\n        return { users: results }\n    } catch (e) {\n        console.log('error')\n    }\n});\n\nexport default function* functionExportSaga() {\n    yield takeLatest(triggerGetUser.type, getUserSaga);\n    yield takeLatest(triggerGetUsers.type, getUsersSaga);\n\n\n}\n"]},"metadata":{},"sourceType":"module"}