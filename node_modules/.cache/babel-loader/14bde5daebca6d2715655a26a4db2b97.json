{"ast":null,"code":"function isHexColor(hex) {\n  const replaced = hex.replace(\"#\", \"\");\n  return typeof replaced === \"string\" && replaced.length === 6 && !Number.isNaN(Number(`0x${replaced}`));\n}\n\nfunction hexToRgba(color) {\n  const replaced = color.replace(\"#\", \"\");\n  const parsed = parseInt(replaced, 16);\n  const r = parsed >> 16 & 255;\n  const g = parsed >> 8 & 255;\n  const b = parsed & 255;\n  return {\n    r,\n    g,\n    b,\n    a: 1\n  };\n}\n\nfunction rgbStringToRgba(color) {\n  const [r, g, b, a] = color.replace(/[^0-9,.]/g, \"\").split(\",\").map(Number);\n  return {\n    r,\n    g,\n    b,\n    a: a || 1\n  };\n}\n\nfunction toRgba(color) {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith(\"rgb\")) {\n    return rgbStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1\n  };\n}\n\nexport { toRgba };","map":{"version":3,"mappings":"AAAA,SAASA,UAAT,CAAoBC,GAApB,EAAyB;AACvB,QAAMC,QAAQ,GAAGD,GAAG,CAACE,OAAJ,CAAY,GAAZ,EAAiB,EAAjB,CAAjB;AACA,SAAO,OAAOD,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,CAACE,MAAT,KAAoB,CAApD,IAAyD,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAAE,KAAIH,QAAS,EAAf,CAAnB,CAAjE;AACD;;AACD,SAASK,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,QAAMN,QAAQ,GAAGM,KAAK,CAACL,OAAN,CAAc,GAAd,EAAmB,EAAnB,CAAjB;AACA,QAAMM,MAAM,GAAGC,QAAQ,CAACR,QAAD,EAAW,EAAX,CAAvB;AACA,QAAMS,CAAC,GAAGF,MAAM,IAAI,EAAV,GAAe,GAAzB;AACA,QAAMG,CAAC,GAAGH,MAAM,IAAI,CAAV,GAAc,GAAxB;AACA,QAAMI,CAAC,GAAGJ,MAAM,GAAG,GAAnB;AACA,SAAO;AACLE,KADK;AAELC,KAFK;AAGLC,KAHK;AAILC,KAAC,EAAE;AAJE,GAAP;AAMD;;AACD,SAASC,eAAT,CAAyBP,KAAzB,EAAgC;AAC9B,QAAM,CAACG,CAAD,EAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV,IAAeN,KAAK,CAACL,OAAN,CAAc,WAAd,EAA2B,EAA3B,EAA+Ba,KAA/B,CAAqC,GAArC,EAA0CC,GAA1C,CAA8CZ,MAA9C,CAArB;AACA,SAAO;AAAEM,KAAF;AAAKC,KAAL;AAAQC,KAAR;AAAWC,KAAC,EAAEA,CAAC,IAAI;AAAnB,GAAP;AACD;;AACM,SAASI,MAAT,CAAgBV,KAAhB,EAAuB;AAC5B,MAAIR,UAAU,CAACQ,KAAD,CAAd,EAAuB;AACrB,WAAOD,SAAS,CAACC,KAAD,CAAhB;AACD;;AACD,MAAIA,KAAK,CAACW,UAAN,CAAiB,KAAjB,CAAJ,EAA6B;AAC3B,WAAOJ,eAAe,CAACP,KAAD,CAAtB;AACD;;AACD,SAAO;AACLG,KAAC,EAAE,CADE;AAELC,KAAC,EAAE,CAFE;AAGLC,KAAC,EAAE,CAHE;AAILC,KAAC,EAAE;AAJE,GAAP;AAMF","names":["isHexColor","hex","replaced","replace","length","Number","isNaN","hexToRgba","color","parsed","parseInt","r","g","b","a","rgbStringToRgba","split","map","toRgba","startsWith"],"sources":["/Users/nikita/testProjectTabel/node_modules/@mantine/styles/src/theme/utils/to-rgba/to-rgba.ts"],"sourcesContent":["/* eslint-disable no-bitwise */\n\ninterface RGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\nfunction isHexColor(hex: string): boolean {\n  const replaced = hex.replace('#', '');\n  return (\n    typeof replaced === 'string' && replaced.length === 6 && !Number.isNaN(Number(`0x${replaced}`))\n  );\n}\n\nfunction hexToRgba(color: string): RGBA {\n  const replaced = color.replace('#', '');\n\n  const parsed = parseInt(replaced, 16);\n  const r = (parsed >> 16) & 255;\n  const g = (parsed >> 8) & 255;\n  const b = parsed & 255;\n\n  return {\n    r,\n    g,\n    b,\n    a: 1,\n  };\n}\n\nfunction rgbStringToRgba(color: string): RGBA {\n  const [r, g, b, a] = color\n    .replace(/[^0-9,.]/g, '')\n    .split(',')\n    .map(Number);\n\n  return { r, g, b, a: a || 1 };\n}\n\nexport function toRgba(color: string): RGBA {\n  if (isHexColor(color)) {\n    return hexToRgba(color);\n  }\n\n  if (color.startsWith('rgb')) {\n    return rgbStringToRgba(color);\n  }\n\n  return {\n    r: 0,\n    g: 0,\n    b: 0,\n    a: 1,\n  };\n}\n"]},"metadata":{},"sourceType":"module"}