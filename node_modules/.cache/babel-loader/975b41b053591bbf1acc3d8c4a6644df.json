{"ast":null,"code":"/* istanbul ignore file */\n\n/* tslint:disable */\n\n/* eslint-disable */\nimport { request as __request } from '../core/request';\nexport class AnnotationService {\n  /**\n   * List Campaigns\n   * @param token\n   * @returns AnnotationCampaign Successful Response\n   * @throws ApiError\n   */\n  static listCampaignsAnnotationCampaignGet(token) {\n    return __request({\n      method: 'GET',\n      path: `/annotation/campaign`,\n      query: {\n        'token': token\n      },\n      errors: {\n        422: `Validation Error`\n      }\n    });\n  }\n  /**\n   * List Rasters\n   * @param campaignId\n   * @param token\n   * @returns GroundworkRaster Successful Response\n   * @throws ApiError\n   */\n\n\n  static listRastersAnnotationCampaignCampaignIdRasterGet(campaignId, token) {\n    return __request({\n      method: 'GET',\n      path: `/annotation/campaign/${campaignId}/raster`,\n      query: {\n        'token': token\n      },\n      errors: {\n        422: `Validation Error`\n      }\n    });\n  }\n  /**\n   * Add Raster\n   * @param campaignId\n   * @param rasterId\n   * @param token\n   * @returns string Successful Response\n   * @throws ApiError\n   */\n\n\n  static addRasterAnnotationCampaignCampaignIdRasterPost(campaignId, rasterId, token) {\n    return __request({\n      method: 'POST',\n      path: `/annotation/campaign/${campaignId}/raster`,\n      query: {\n        'raster_id': rasterId,\n        'token': token\n      },\n      errors: {\n        422: `Validation Error`\n      }\n    });\n  }\n  /**\n   * Export Campaign\n   * @param campaignId\n   * @param token\n   * @returns string Successful Response\n   * @throws ApiError\n   */\n\n\n  static exportCampaignAnnotationCampaignCampaignIdExportPost(campaignId, token) {\n    return __request({\n      method: 'POST',\n      path: `/annotation/campaign/${campaignId}/export`,\n      query: {\n        'token': token\n      },\n      errors: {\n        422: `Validation Error`\n      }\n    });\n  }\n  /**\n   * Import To Rexy\n   * @param campaignId\n   * @param token\n   * @returns string Successful Response\n   * @throws ApiError\n   */\n\n\n  static importToRexyAnnotationCampaignCampaignIdImportToRexyPost(campaignId, token) {\n    return __request({\n      method: 'POST',\n      path: `/annotation/campaign/${campaignId}/import-to-rexy`,\n      query: {\n        'token': token\n      },\n      errors: {\n        422: `Validation Error`\n      }\n    });\n  }\n  /**\n   * Predict Project\n   * @param campaignId\n   * @param rasterId\n   * @param modelId\n   * @param token\n   * @returns any Successful Response\n   * @throws ApiError\n   */\n\n\n  static predictProjectAnnotationCampaignCampaignIdRasterRasterIdPredictPost(campaignId, rasterId, modelId, token) {\n    return __request({\n      method: 'POST',\n      path: `/annotation/campaign/${campaignId}/raster/${rasterId}/predict`,\n      query: {\n        'model_id': modelId,\n        'token': token\n      },\n      errors: {\n        422: `Validation Error`\n      }\n    });\n  }\n\n}","map":{"version":3,"sources":["/Users/nikita/testProjectTabel/src/api-client-codegen/services/AnnotationService.ts"],"names":["request","__request","AnnotationService","listCampaignsAnnotationCampaignGet","token","method","path","query","errors","listRastersAnnotationCampaignCampaignIdRasterGet","campaignId","addRasterAnnotationCampaignCampaignIdRasterPost","rasterId","exportCampaignAnnotationCampaignCampaignIdExportPost","importToRexyAnnotationCampaignCampaignIdImportToRexyPost","predictProjectAnnotationCampaignCampaignIdRasterRasterIdPredictPost","modelId"],"mappings":"AAAA;;AACA;;AACA;AAIA,SAASA,OAAO,IAAIC,SAApB,QAAqC,iBAArC;AAEA,OAAO,MAAMC,iBAAN,CAAwB;AAE3B;AACJ;AACA;AACA;AACA;AACA;AACoD,SAAlCC,kCAAkC,CAC5CC,KAD4C,EAEA;AAC5C,WAAOH,SAAS,CAAC;AACbI,MAAAA,MAAM,EAAE,KADK;AAEbC,MAAAA,IAAI,EAAG,sBAFM;AAGbC,MAAAA,KAAK,EAAE;AACH,iBAASH;AADN,OAHM;AAMbI,MAAAA,MAAM,EAAE;AACJ,aAAM;AADF;AANK,KAAD,CAAhB;AAUH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACkE,SAAhDC,gDAAgD,CAC1DC,UAD0D,EAE1DN,KAF0D,EAGhB;AAC1C,WAAOH,SAAS,CAAC;AACbI,MAAAA,MAAM,EAAE,KADK;AAEbC,MAAAA,IAAI,EAAG,wBAAuBI,UAAW,SAF5B;AAGbH,MAAAA,KAAK,EAAE;AACH,iBAASH;AADN,OAHM;AAMbI,MAAAA,MAAM,EAAE;AACJ,aAAM;AADF;AANK,KAAD,CAAhB;AAUH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACiE,SAA/CG,+CAA+C,CACzDD,UADyD,EAEzDE,QAFyD,EAGzDR,KAHyD,EAIhC;AACzB,WAAOH,SAAS,CAAC;AACbI,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,IAAI,EAAG,wBAAuBI,UAAW,SAF5B;AAGbH,MAAAA,KAAK,EAAE;AACH,qBAAaK,QADV;AAEH,iBAASR;AAFN,OAHM;AAObI,MAAAA,MAAM,EAAE;AACJ,aAAM;AADF;AAPK,KAAD,CAAhB;AAWH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACsE,SAApDK,oDAAoD,CAC9DH,UAD8D,EAE9DN,KAF8D,EAGrC;AACzB,WAAOH,SAAS,CAAC;AACbI,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,IAAI,EAAG,wBAAuBI,UAAW,SAF5B;AAGbH,MAAAA,KAAK,EAAE;AACH,iBAASH;AADN,OAHM;AAMbI,MAAAA,MAAM,EAAE;AACJ,aAAM;AADF;AANK,KAAD,CAAhB;AAUH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AAC0E,SAAxDM,wDAAwD,CAClEJ,UADkE,EAElEN,KAFkE,EAGlC;AAChC,WAAOH,SAAS,CAAC;AACbI,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,IAAI,EAAG,wBAAuBI,UAAW,iBAF5B;AAGbH,MAAAA,KAAK,EAAE;AACH,iBAASH;AADN,OAHM;AAMbI,MAAAA,MAAM,EAAE;AACJ,aAAM;AADF;AANK,KAAD,CAAhB;AAUH;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACqF,SAAnEO,mEAAmE,CAC7EL,UAD6E,EAE7EE,QAF6E,EAG7EI,OAH6E,EAI7EZ,KAJ6E,EAKvD;AACtB,WAAOH,SAAS,CAAC;AACbI,MAAAA,MAAM,EAAE,MADK;AAEbC,MAAAA,IAAI,EAAG,wBAAuBI,UAAW,WAAUE,QAAS,UAF/C;AAGbL,MAAAA,KAAK,EAAE;AACH,oBAAYS,OADT;AAEH,iBAASZ;AAFN,OAHM;AAObI,MAAAA,MAAM,EAAE;AACJ,aAAM;AADF;AAPK,KAAD,CAAhB;AAWH;;AAhJ0B","sourcesContent":["/* istanbul ignore file */\n/* tslint:disable */\n/* eslint-disable */\nimport type { AnnotationCampaign } from '../models/AnnotationCampaign';\nimport type { GroundworkRaster } from '../models/GroundworkRaster';\nimport type { CancelablePromise } from '../core/CancelablePromise';\nimport { request as __request } from '../core/request';\n\nexport class AnnotationService {\n\n    /**\n     * List Campaigns\n     * @param token\n     * @returns AnnotationCampaign Successful Response\n     * @throws ApiError\n     */\n    public static listCampaignsAnnotationCampaignGet(\n        token: string,\n    ): CancelablePromise<Array<AnnotationCampaign>> {\n        return __request({\n            method: 'GET',\n            path: `/annotation/campaign`,\n            query: {\n                'token': token,\n            },\n            errors: {\n                422: `Validation Error`,\n            },\n        });\n    }\n\n    /**\n     * List Rasters\n     * @param campaignId\n     * @param token\n     * @returns GroundworkRaster Successful Response\n     * @throws ApiError\n     */\n    public static listRastersAnnotationCampaignCampaignIdRasterGet(\n        campaignId: string,\n        token: string,\n    ): CancelablePromise<Array<GroundworkRaster>> {\n        return __request({\n            method: 'GET',\n            path: `/annotation/campaign/${campaignId}/raster`,\n            query: {\n                'token': token,\n            },\n            errors: {\n                422: `Validation Error`,\n            },\n        });\n    }\n\n    /**\n     * Add Raster\n     * @param campaignId\n     * @param rasterId\n     * @param token\n     * @returns string Successful Response\n     * @throws ApiError\n     */\n    public static addRasterAnnotationCampaignCampaignIdRasterPost(\n        campaignId: string,\n        rasterId: string,\n        token: string,\n    ): CancelablePromise<string> {\n        return __request({\n            method: 'POST',\n            path: `/annotation/campaign/${campaignId}/raster`,\n            query: {\n                'raster_id': rasterId,\n                'token': token,\n            },\n            errors: {\n                422: `Validation Error`,\n            },\n        });\n    }\n\n    /**\n     * Export Campaign\n     * @param campaignId\n     * @param token\n     * @returns string Successful Response\n     * @throws ApiError\n     */\n    public static exportCampaignAnnotationCampaignCampaignIdExportPost(\n        campaignId: string,\n        token: string,\n    ): CancelablePromise<string> {\n        return __request({\n            method: 'POST',\n            path: `/annotation/campaign/${campaignId}/export`,\n            query: {\n                'token': token,\n            },\n            errors: {\n                422: `Validation Error`,\n            },\n        });\n    }\n\n    /**\n     * Import To Rexy\n     * @param campaignId\n     * @param token\n     * @returns string Successful Response\n     * @throws ApiError\n     */\n    public static importToRexyAnnotationCampaignCampaignIdImportToRexyPost(\n        campaignId: string,\n        token: string,\n    ): CancelablePromise<Array<string>> {\n        return __request({\n            method: 'POST',\n            path: `/annotation/campaign/${campaignId}/import-to-rexy`,\n            query: {\n                'token': token,\n            },\n            errors: {\n                422: `Validation Error`,\n            },\n        });\n    }\n\n    /**\n     * Predict Project\n     * @param campaignId\n     * @param rasterId\n     * @param modelId\n     * @param token\n     * @returns any Successful Response\n     * @throws ApiError\n     */\n    public static predictProjectAnnotationCampaignCampaignIdRasterRasterIdPredictPost(\n        campaignId: string,\n        rasterId: string,\n        modelId: string,\n        token: string,\n    ): CancelablePromise<any> {\n        return __request({\n            method: 'POST',\n            path: `/annotation/campaign/${campaignId}/raster/${rasterId}/predict`,\n            query: {\n                'model_id': modelId,\n                'token': token,\n            },\n            errors: {\n                422: `Validation Error`,\n            },\n        });\n    }\n\n}"]},"metadata":{},"sourceType":"module"}