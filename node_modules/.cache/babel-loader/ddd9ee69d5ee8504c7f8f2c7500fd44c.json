{"ast":null,"code":"function groupOptions(_ref) {\n  let {\n    data\n  } = _ref;\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n\n    return acc;\n  }, {});\n  Object.keys(groupedData).forEach(groupName => {\n    sortedData.push(...groupedData[groupName].map(index => data[index]));\n  });\n  sortedData.push(...unGroupedData.map(itemIndex => data[itemIndex]));\n  return sortedData;\n}\n\nexport { groupOptions };","map":{"version":3,"mappings":"AAAO,SAASA,YAAT,OAAgC;AAAA,MAAV;AAAEC;AAAF,GAAU;AACrC,QAAMC,UAAU,GAAG,EAAnB;AACA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,WAAW,GAAGH,IAAI,CAACI,MAAL,CAAY,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,KAAsB;AACpD,QAAID,IAAI,CAACE,KAAT,EAAgB;AACd,UAAIH,GAAG,CAACC,IAAI,CAACE,KAAN,CAAP,EACEH,GAAG,CAACC,IAAI,CAACE,KAAN,CAAH,CAAgBC,IAAhB,CAAqBF,KAArB,EADF,KAGEF,GAAG,CAACC,IAAI,CAACE,KAAN,CAAH,GAAkB,CAACD,KAAD,CAAlB;AACH,KALD,MAKO;AACLL,mBAAa,CAACO,IAAd,CAAmBF,KAAnB;AACD;;AACD,WAAOF,GAAP;AACD,GAVmB,EAUjB,EAViB,CAApB;AAWAK,QAAM,CAACC,IAAP,CAAYR,WAAZ,EAAyBS,OAAzB,CAAkCC,SAAD,IAAe;AAC9CZ,cAAU,CAACQ,IAAX,CAAgB,GAAGN,WAAW,CAACU,SAAD,CAAX,CAAuBC,GAAvB,CAA4BP,KAAD,IAAWP,IAAI,CAACO,KAAD,CAA1C,CAAnB;AACD,GAFD;AAGAN,YAAU,CAACQ,IAAX,CAAgB,GAAGP,aAAa,CAACY,GAAd,CAAmBC,SAAD,IAAef,IAAI,CAACe,SAAD,CAArC,CAAnB;AACA,SAAOd,UAAP;AACF","names":["groupOptions","data","sortedData","unGroupedData","groupedData","reduce","acc","item","index","group","push","Object","keys","forEach","groupName","map","itemIndex"],"sources":["/Users/nikita/testProjectTabel/node_modules/@mantine/core/src/utils/group-options/group-options.ts"],"sourcesContent":["interface GroupData {\n  data: { group?: string }[];\n}\n\nexport function groupOptions({ data }: GroupData) {\n  const sortedData = [];\n  const unGroupedData = [];\n  const groupedData = data.reduce((acc, item, index) => {\n    if (item.group) {\n      if (acc[item.group]) acc[item.group].push(index);\n      else acc[item.group] = [index];\n    } else {\n      unGroupedData.push(index);\n    }\n    return acc;\n  }, {});\n\n  Object.keys(groupedData).forEach((groupName) => {\n    sortedData.push(...groupedData[groupName].map((index) => data[index]));\n  });\n\n  sortedData.push(...unGroupedData.map((itemIndex) => data[itemIndex]));\n\n  return sortedData;\n}\n"]},"metadata":{},"sourceType":"module"}