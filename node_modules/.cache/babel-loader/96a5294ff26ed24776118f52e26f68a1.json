{"ast":null,"code":"import { fromEntries } from './utils/from-entries/from-entries.js';\nimport { useCss } from './use-css.js';\nimport { useMantineTheme, useMantineThemeStyles } from '../theme/MantineProvider.js';\nimport { mergeClassNames } from './utils/merge-class-names/merge-class-names.js';\n\nfunction createStyles(getCssObjectOrCssObject) {\n  const getCssObject = typeof getCssObjectOrCssObject === \"function\" ? getCssObjectOrCssObject : () => getCssObjectOrCssObject;\n\n  function useStyles(params, options) {\n    const theme = useMantineTheme();\n    const themeStyles = useMantineThemeStyles()[options == null ? void 0 : options.name];\n    const {\n      css,\n      cx\n    } = useCss();\n    let count = 0;\n\n    function createRef(refName) {\n      count += 1;\n      return `mantine-ref_${refName || \"\"}_${count}`;\n    }\n\n    const cssObject = getCssObject(theme, params, createRef);\n\n    const _styles = typeof (options == null ? void 0 : options.styles) === \"function\" ? options == null ? void 0 : options.styles(theme) : (options == null ? void 0 : options.styles) || {};\n\n    const _themeStyles = typeof themeStyles === \"function\" ? themeStyles(theme) : themeStyles || {};\n\n    const classes = fromEntries(Object.keys(cssObject).map(key => {\n      const mergedStyles = cx(css(cssObject[key]), css(_themeStyles[key]), css(_styles[key]));\n      return [key, mergedStyles];\n    }));\n    return {\n      classes: mergeClassNames(cx, classes, options == null ? void 0 : options.classNames, options == null ? void 0 : options.name),\n      cx,\n      theme\n    };\n  }\n\n  return useStyles;\n}\n\nexport { createStyles };","map":{"version":3,"mappings":";;;;;AAIO,SAASA,YAAT,CAAsBC,uBAAtB,EAA+C;AACpD,QAAMC,YAAY,GAAG,OAAOD,uBAAP,KAAmC,UAAnC,GAAgDA,uBAAhD,GAA0E,MAAMA,uBAArG;;AACA,WAASE,SAAT,CAAmBC,MAAnB,EAA2BC,OAA3B,EAAoC;AAClC,UAAMC,KAAK,GAAGC,eAAe,EAA7B;AACA,UAAMC,WAAW,GAAGC,qBAAqB,GAAGJ,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACK,IAAtC,CAAzC;AACA,UAAM;AAAEC,SAAF;AAAOC;AAAP,QAAcC,MAAM,EAA1B;AACA,QAAIC,KAAK,GAAG,CAAZ;;AACA,aAASC,SAAT,CAAmBC,OAAnB,EAA4B;AAC1BF,WAAK,IAAI,CAAT;AACA,aAAQ,eAAcE,OAAO,IAAI,EAAG,IAAGF,KAAM,EAA7C;AACD;;AACD,UAAMG,SAAS,GAAGf,YAAY,CAACI,KAAD,EAAQF,MAAR,EAAgBW,SAAhB,CAA9B;;AACA,UAAMG,OAAO,GAAG,QAAQb,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACc,MAA3C,MAAuD,UAAvD,GAAoEd,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACc,MAAR,CAAeb,KAAf,CAA/F,GAAuH,CAACD,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACc,MAApC,KAA+C,EAAtL;;AACA,UAAMC,YAAY,GAAG,OAAOZ,WAAP,KAAuB,UAAvB,GAAoCA,WAAW,CAACF,KAAD,CAA/C,GAAyDE,WAAW,IAAI,EAA7F;;AACA,UAAMa,OAAO,GAAGC,WAAW,CAACC,MAAM,CAACC,IAAP,CAAYP,SAAZ,EAAuBQ,GAAvB,CAA4BC,GAAD,IAAS;AAC9D,YAAMC,YAAY,GAAGf,EAAE,CAACD,GAAG,CAACM,SAAS,CAACS,GAAD,CAAV,CAAJ,EAAsBf,GAAG,CAACS,YAAY,CAACM,GAAD,CAAb,CAAzB,EAA8Cf,GAAG,CAACO,OAAO,CAACQ,GAAD,CAAR,CAAjD,CAAvB;AACA,aAAO,CAACA,GAAD,EAAMC,YAAN,CAAP;AACD,KAH2B,CAAD,CAA3B;AAIA,WAAO;AAAEN,aAAO,EAAEO,eAAe,CAAChB,EAAD,EAAKS,OAAL,EAAchB,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACwB,UAAjD,EAA6DxB,OAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACK,IAAhG,CAA1B;AAAiIE,QAAjI;AAAqIN;AAArI,KAAP;AACD;;AACD,SAAOH,SAAP;AACF","names":["createStyles","getCssObjectOrCssObject","getCssObject","useStyles","params","options","theme","useMantineTheme","themeStyles","useMantineThemeStyles","name","css","cx","useCss","count","createRef","refName","cssObject","_styles","styles","_themeStyles","classes","fromEntries","Object","keys","map","key","mergedStyles","mergeClassNames","classNames"],"sources":["/Users/nikita/testProjectTabel/node_modules/@mantine/styles/src/tss/create-styles.ts"],"sourcesContent":["import type { MantineTheme } from '../theme';\nimport type { CSSObject } from './types';\nimport { fromEntries } from './utils/from-entries/from-entries';\nimport { useCss } from './use-css';\nimport { useMantineTheme, useMantineThemeStyles } from '../theme/MantineProvider';\nimport { mergeClassNames } from './utils/merge-class-names/merge-class-names';\n\nexport interface UseStylesOptions<Key extends string> {\n  classNames?: Partial<Record<Key, string>>;\n  styles?:\n    | Partial<Record<Key, CSSObject>>\n    | ((theme: MantineTheme) => Partial<Record<Key, CSSObject>>);\n  name: string;\n}\n\nexport function createStyles<Key extends string = string, Params = void>(\n  getCssObjectOrCssObject:\n    | ((\n        theme: MantineTheme,\n        params: Params,\n        createRef: (refName: string) => string\n      ) => Record<Key, CSSObject>)\n    | Record<Key, CSSObject>\n) {\n  const getCssObject =\n    typeof getCssObjectOrCssObject === 'function'\n      ? getCssObjectOrCssObject\n      : () => getCssObjectOrCssObject;\n\n  function useStyles(params: Params, options?: UseStylesOptions<Key>) {\n    const theme = useMantineTheme();\n    const themeStyles = useMantineThemeStyles()[options?.name];\n\n    const { css, cx } = useCss();\n\n    let count = 0;\n\n    function createRef(refName: string) {\n      count += 1;\n      return `mantine-ref_${refName || ''}_${count}`;\n    }\n\n    const cssObject = getCssObject(theme, params, createRef);\n\n    const _styles =\n      typeof options?.styles === 'function' ? options?.styles(theme) : options?.styles || {};\n    const _themeStyles = typeof themeStyles === 'function' ? themeStyles(theme) : themeStyles || {};\n\n    const classes = fromEntries(\n      Object.keys(cssObject).map((key) => {\n        const mergedStyles = cx(css(cssObject[key]), css(_themeStyles[key]), css(_styles[key]));\n        return [key, mergedStyles];\n      })\n    ) as Record<Key, string>;\n\n    return { classes: mergeClassNames(cx, classes, options?.classNames, options?.name), cx, theme };\n  }\n\n  return useStyles;\n}\n"]},"metadata":{},"sourceType":"module"}