import { AsyncActionCreators } from 'typescript-fsa';
import { SagaIterator } from 'redux-saga';
export interface BindAsyncActionOptions {
    skipStartedAction?: boolean;
}
export declare function bindAsyncAction<R>(actionCreators: AsyncActionCreators<void, R, any>, options?: BindAsyncActionOptions): {
    <Args extends any[]>(worker: (params: void, ...args: Args) => Promise<R> | SagaIterator): (params: void, ...args: Args) => SagaIterator;
    (worker: () => Promise<R> | SagaIterator): () => SagaIterator;
};
export declare function bindAsyncAction<P, R>(actionCreators: AsyncActionCreators<P, R, any>, options?: BindAsyncActionOptions): {
    <Args extends any[]>(worker: (params: P, ...args: Args) => Promise<R> | SagaIterator): (params: P, ...args: Args) => SagaIterator;
};
