{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAoFA,SAAgB,uBAAuB,CAAI,YAAe;IACtD,OAAO,WAAW,CAAsB,YAAY,CAAC,CAAC;AAC1D,CAAC;AAFD,0DAEC;AAED,SAAgB,0BAA0B;IACtC,OAAO,WAAW,EAAW,CAAC;AAClC,CAAC;AAFD,gEAEC;AAED,SAAgB,gBAAgB;IAK5B,OAAO,WAAW,EAAkB,CAAC;AACzC,CAAC;AAND,4CAMC;AAED,SAAS,WAAW,CAChB,YAAkB;IAElB,IAAM,oBAAoB,GAEtB,EAAE,CAAC;IACP,IAAM,OAAO,GAAG,kBAAkB,CAC9B,YAAY,EACZ,oBAAoB,CACe,CAAC;IAExC,OAAO,CAAC,cAAc,GAAG,UACrB,aAA+B,EAC/B,OAAsC;QAEtC,oBAAoB,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC;QACnD,OAAO,OAAO,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,CAAC,IAAI,GAAG,UACX,aAA+B,EAC/B,OAA8B;QAE9B,OAAA,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,UAAC,KAAK,EAAE,MAAM;YAChD,OAAA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;QAA9B,CAA8B,CACjC;IAFD,CAEC,CAAC;IAEN,OAAO,CAAC,eAAe,GAAG,UACtB,cAAuC,EACvC,OAAsC;QAEtC,KAA4B,UAAc,EAAd,iCAAc,EAAd,4BAAc,EAAd,IAAc,EAAE;YAAvC,IAAM,aAAa,uBAAA;YACpB,OAAO,CAAC,cAAc,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;SAClD;QACD,OAAO,OAAO,CAAC;IACnB,CAAC,CAAC;IAEF,OAAO,CAAC,KAAK,GAAG,UACZ,cAAuC,EACvC,OAA8B;QAE9B,OAAA,OAAO,CAAC,eAAe,CAAC,cAAc,EAAE,UAAC,KAAK,EAAE,MAAM;YAClD,OAAA,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,OAAO,CAAC;QAA9B,CAA8B,CACjC;IAFD,CAEC,CAAC;IAEN,OAAO,CAAC,YAAY,GAAG,UACnB,aAEuC,IACtC,OAAA,aAAa,CAAC,OAAO,CAAC,EAAtB,CAAsB,CAAC;IAE5B,OAAO,CAAC,OAAO,GAAG,UAAC,cAA6C;QAC5D,OAAA,kBAAkB,CACd,YAAY,eACP,oBAAoB,GACzB,cAAc,CACjB;IAJD,CAIC,CAAC;IAEN,OAAO,CAAC,KAAK,GAAG;QACZ,OAAA,kBAAkB,CAAC,YAAY,eAAO,oBAAoB,EAAG;IAA7D,CAA6D,CAAC;IAElE,OAAO,OAAO,CAAC;AACnB,CAAC;AAED,SAAS,kBAAkB,CACvB,YAA6B,EAC7B,oBAAuE,EACvE,cAA8C;IAE9C,OAAO,UAAC,WAAoB,EAAE,MAAiB;QAC3C,IAAM,KAAK,GAAG,WAAW,KAAK,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,YAAY,CAAC;QACrE,IAAM,OAAO,GAAG,oBAAoB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,cAAc,CAAC;QACpE,OAAO,OAAO;YACV,CAAC,CAAC,OAAO,CAAC,KAAY,EAAE,MAAM,CAAC;YAC/B,CAAC,CAAG,KAA0B,CAAC;IACvC,CAAC,CAAC;AACN,CAAC","sourcesContent":["import { Action, ActionCreator, AnyAction } from \"typescript-fsa\";\n\nexport interface ReducerBuilder<InS, OutS = InS, PassedS = InS | undefined> {\n    case<P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, P>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    caseWithAction<P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    // cases variadic overloads\n    cases<P1, P2>(\n        actionCreators: [ActionCreator<P1>, ActionCreator<P2>],\n        handler: Handler<InS, OutS, P1 | P2>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    cases<P1, P2, P3>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n        ],\n        handler: Handler<InS, OutS, P1 | P2 | P3>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    cases<P1, P2, P3, P4>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n            ActionCreator<P4>,\n        ],\n        handler: Handler<InS, OutS, P1 | P2 | P3 | P4>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    cases<P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, P>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    // casesWithAction variadic overloads\n    casesWithAction<P1, P2>(\n        actionCreators: [ActionCreator<P1>, ActionCreator<P2>],\n        handler: Handler<InS, OutS, Action<P1 | P2>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    casesWithAction<P1, P2, P3>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n        ],\n        handler: Handler<InS, OutS, Action<P1 | P2 | P3>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    casesWithAction<P1, P2, P3, P4>(\n        actionCreators: [\n            ActionCreator<P1>,\n            ActionCreator<P2>,\n            ActionCreator<P3>,\n            ActionCreator<P4>,\n        ],\n        handler: Handler<InS, OutS, Action<P1 | P2 | P3 | P4>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n    casesWithAction<P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    withHandling(\n        updateBuilder: (\n            builder: ReducerBuilder<InS, OutS, PassedS>,\n        ) => ReducerBuilder<InS, OutS, PassedS>,\n    ): ReducerBuilder<InS, OutS, PassedS>;\n\n    // Intentionally avoid AnyAction in return type so packages can export\n    // reducers created using .default() or .build() without consumers requiring\n    // a dependency on typescript-fsa.\n    default(\n        defaultHandler: Handler<InS, OutS, AnyAction>,\n    ): (state: PassedS, action: { type: any }) => OutS;\n    build(): (state: PassedS, action: { type: any }) => OutS;\n    (state: PassedS, action: AnyAction): OutS;\n}\n\nexport type Handler<InS, OutS, P> = (state: InS, payload: P) => OutS;\n\nexport function reducerWithInitialState<S>(initialState: S): ReducerBuilder<S> {\n    return makeReducer<S, S, S | undefined>(initialState);\n}\n\nexport function reducerWithoutInitialState<S>(): ReducerBuilder<S, S, S> {\n    return makeReducer<S, S, S>();\n}\n\nexport function upcastingReducer<InS extends OutS, OutS>(): ReducerBuilder<\n    InS,\n    OutS,\n    InS\n> {\n    return makeReducer<InS, OutS, InS>();\n}\n\nfunction makeReducer<InS, OutS, PassedS>(\n    initialState?: InS,\n): ReducerBuilder<InS, OutS, PassedS> {\n    const handlersByActionType: {\n        [actionType: string]: Handler<InS, OutS, any>;\n    } = {};\n    const reducer = getReducerFunction(\n        initialState,\n        handlersByActionType,\n    ) as ReducerBuilder<InS, OutS, PassedS>;\n\n    reducer.caseWithAction = <P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ) => {\n        handlersByActionType[actionCreator.type] = handler;\n        return reducer;\n    };\n\n    reducer.case = <P>(\n        actionCreator: ActionCreator<P>,\n        handler: Handler<InS, OutS, P>,\n    ) =>\n        reducer.caseWithAction(actionCreator, (state, action) =>\n            handler(state, action.payload),\n        );\n\n    reducer.casesWithAction = <P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, Action<P>>,\n    ) => {\n        for (const actionCreator of actionCreators) {\n            reducer.caseWithAction(actionCreator, handler);\n        }\n        return reducer;\n    };\n\n    reducer.cases = <P>(\n        actionCreators: Array<ActionCreator<P>>,\n        handler: Handler<InS, OutS, P>,\n    ) =>\n        reducer.casesWithAction(actionCreators, (state, action) =>\n            handler(state, action.payload),\n        );\n\n    reducer.withHandling = (\n        updateBuilder: (\n            builder: ReducerBuilder<InS, OutS, PassedS>,\n        ) => ReducerBuilder<InS, OutS, PassedS>,\n    ) => updateBuilder(reducer);\n\n    reducer.default = (defaultHandler: Handler<InS, OutS, AnyAction>) =>\n        getReducerFunction<InS, OutS, PassedS>(\n            initialState,\n            { ...handlersByActionType },\n            defaultHandler,\n        );\n\n    reducer.build = () =>\n        getReducerFunction(initialState, { ...handlersByActionType });\n\n    return reducer;\n}\n\nfunction getReducerFunction<InS, OutS, PassedS>(\n    initialState: InS | undefined,\n    handlersByActionType: { [actionType: string]: Handler<InS, OutS, any> },\n    defaultHandler?: Handler<InS, OutS, AnyAction>,\n) {\n    return (passedState: PassedS, action: AnyAction) => {\n        const state = passedState !== undefined ? passedState : initialState;\n        const handler = handlersByActionType[action.type] || defaultHandler;\n        return handler\n            ? handler(state as InS, action)\n            : ((state as unknown) as OutS);\n    };\n}\n"]}